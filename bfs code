#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
void bfs(int start,vector<int>* v,int n)
{
	queue<int> q;
	q.push(1);
	bool* visited=new bool[n+1];
	for(int i=0;i<=n;i++)
	visited[i]=false;
	visited[1]=true;
	while(!q.empty())
	{
		int y=q.front();
		cout << y << endl;
		q.pop();
		for(int i=0;i<v[y].size();i++)
		{
			if(!visited[v[y][i]])
			{
				q.push(v[y][i]);
				visited[v[y][i]]=true;
			}
		}
	}
}
///////////////
vector<vector<int>> adj;  // adjacency list representation
int n; // number of nodes
int s; // source vertex

queue<int> q;
vector<bool> used(n);
vector<int> d(n), p(n);
void bfs()
{
q.push(s);
used[s] = true;
p[s] = -1;
while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (int u : adj[v]) {
        if (!used[u]) {
            used[u] = true;
            q.push(u);
            d[u] = d[v] + 1;
            p[u] = v;
        }
    }
    If we have to restore and display the shortest path from the source to some vertex u, it can be done in the following manner:

if (!used[u]) {
    cout << "No path!";
} else {
    vector<int> path;
    for (int v = u; v != -1; v = p[v])
        path.push_back(v);
    reverse(path.begin(), path.end());
    cout << "Path: ";
    for (int v : path)
        cout << v << " ";
}
}

int main()
{
    int n,m;
    cin >> n >> m;
    vector<int>* v=new vector<int>[n+1];
    for(int i=0;i<m;i++)
    {
    	int x,y;
    	cin >> x >> y;
    	v[x].push_back(y);
    	v[y].push_back(x);
	}
	bfs(1,v,n);

}
